package de.uni_postdam.hpi.tests.matrix;

import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;

import de.uni_postdam.hpi.jerasure.Buffer;
import de.uni_postdam.hpi.matrix.Schedule;
import de.uni_postdam.hpi.matrix.Schedule.OPERATION;

public class ScheduleTest {

	Schedule copySchedule = Schedule.create(OPERATION.COPY, 0, 1, 0, 1);
	Schedule xorSchedule = Schedule.create(OPERATION.XOR, 0, 1, 0, 1);
	
	byte[] in = null;
	Buffer inBuffer = null;
	
	
	@Before
	public void setUp(){
		this.in = new byte[]{
				// k_1
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x26, 0x27, 0x1e,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				
				// k_2
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				
				// k_3
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
				
		};
		this.inBuffer = new Buffer(in);
	}

	@Test
	public void test_copy() {
		int w = 4;
		int packetSize = 4;
		
		byte[] out = new byte[w * packetSize];
		out = this.copySchedule.operate(in, out, packetSize, w);
		byte[] should = {

				// m_1
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x26, 0x27, 0x1e,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
		};
		
		assertArrayEquals(should, out);
	}
	
	@Test
	public void test_xor() {
		int w = 4;
		int packetSize = 4;
		
		byte[] out = {
				// m_1
				0x00, 0x00, 0x00, 0x00,
				0x52, (byte) 0xf6, 0x09, (byte) 0x85,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
		};

		out = xorSchedule.operate(in, out, packetSize, w);
		byte[] should = {
				// m_1
				0x00, 0x00, 0x00, 0x00,
				0x52, (byte)0xd0, 0x2e, (byte)0x9b,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
		};
		
		assertArrayEquals(should, out);
	}
	
	@Test
	public void test_copy_as_buffer(){

		int w = 4;
		int packetSize = 4;
		
		byte[] out = new byte[w * packetSize];
		out = this.copySchedule.operate(inBuffer, out, packetSize, w);
		byte[] should = {

				// m_1
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x26, 0x27, 0x1e,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
		};
		
		assertArrayEquals(should, out);
	}
	
	@Test
	public void test_xor_as_buffer(){
		int w = 4;
		int packetSize = 4;
		
		byte[] out = {
				// m_1
				0x00, 0x00, 0x00, 0x00,
				0x52, (byte) 0xf6, 0x09, (byte) 0x85,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
		};

		out = xorSchedule.operate(inBuffer, out, packetSize, w);
		byte[] should = {
				// m_1
				0x00, 0x00, 0x00, 0x00,
				0x52, (byte)0xd0, 0x2e, (byte)0x9b,
				0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00,
		};
		
		assertArrayEquals(should, out);
	}

}
